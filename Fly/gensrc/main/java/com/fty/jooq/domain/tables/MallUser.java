/*
 * This file is generated by jOOQ.
 */
package com.fty.jooq.domain.tables;


import com.fty.jooq.domain.Indexes;
import com.fty.jooq.domain.Keys;
import com.fty.jooq.domain.Smallprogram;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MallUser extends TableImpl<Record> {

    private static final long serialVersionUID = 617977376;

    /**
     * The reference instance of <code>smallprogram.mall_user</code>
     */
    public static final MallUser MALL_USER = new MallUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>smallprogram.mall_user.user_id</code>. 主键ID
     */
    public final TableField<Record, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "主键ID");

    /**
     * The column <code>smallprogram.mall_user.open_id</code>.
     */
    public final TableField<Record, String> OPEN_ID = createField("open_id", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>smallprogram.mall_user.user_name</code>.
     */
    public final TableField<Record, String> USER_NAME = createField("user_name", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>smallprogram.mall_user.password</code>.
     */
    public final TableField<Record, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>smallprogram.mall_user.session_key</code>.
     */
    public final TableField<Record, String> SESSION_KEY = createField("session_key", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>smallprogram.mall_user</code> table reference
     */
    public MallUser() {
        this(DSL.name("mall_user"), null);
    }

    /**
     * Create an aliased <code>smallprogram.mall_user</code> table reference
     */
    public MallUser(String alias) {
        this(DSL.name(alias), MALL_USER);
    }

    /**
     * Create an aliased <code>smallprogram.mall_user</code> table reference
     */
    public MallUser(Name alias) {
        this(alias, MALL_USER);
    }

    private MallUser(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private MallUser(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> MallUser(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, MALL_USER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Smallprogram.SMALLPROGRAM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MALL_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_MALL_USER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.KEY_MALL_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MallUser as(String alias) {
        return new MallUser(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MallUser as(Name alias) {
        return new MallUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MallUser rename(String name) {
        return new MallUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MallUser rename(Name name) {
        return new MallUser(name, null);
    }
}
